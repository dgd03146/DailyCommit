{"version":3,"file":"static/js/884.fb958d2b.chunk.js","mappings":"mMACA,EAAuB,mB,SCKvB,EAJa,SAACA,GACZ,OAAO,gBAAKC,UAAWC,EAAhB,SAA+BF,EAAMG,Y,SCF9C,EAAuB,wBAAvB,EAAyD,2BAAzD,EAA8F,2BAA9F,EAAmI,2BCiDnI,EA1CkB,SAACH,GACjB,IAAMI,GAAiBC,EAAAA,EAAAA,UACjBC,GAAeD,EAAAA,EAAAA,UAarB,OACE,SAAC,EAAAE,SAAD,WACE,SAAC,EAAD,WACE,kBAAMN,UAAWC,EAAcM,SAdrC,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBP,EAAeQ,QAAQC,MACvCC,EAAcR,EAAaM,QAAQC,MAIzCb,EAAMe,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAM5C,UACGd,EAAMkB,YACL,gBAAKjB,UAAWC,EAAhB,UACE,SAACiB,EAAA,EAAD,OAIJ,iBAAKlB,UAAWC,EAAhB,WACE,kBAAOkB,QAAQ,SAAf,qBACA,kBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKnB,QAEtC,iBAAKH,UAAWC,EAAhB,WACE,kBAAOkB,QAAQ,OAAf,mBACA,qBAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKjB,QAEpC,gBAAKL,UAAWC,EAAhB,UACE,mBAAQD,UAAU,MAAlB,iC,2BCnBZ,EAjBiB,SAACD,GAChB,OAAgCyB,EAAAA,EAAAA,GAAQC,EAAAA,IAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACO,cAAXH,GACFC,EAAS,aAEV,CAACD,EAAQC,IAMZ,OAAO,SAAC,EAAD,CAAWX,UAAsB,YAAXU,EAAsBb,WAJ3B,SAACiB,GACvBL,EAAYK,GACZH,EAAS","sources":["webpack://react-complete-guide/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","webpack://react-complete-guide/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","pages/NewQuote.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__oSZYV\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__4YrR0\",\"loading\":\"QuoteForm_loading__SSvAp\",\"control\":\"QuoteForm_control__GIoKk\",\"actions\":\"QuoteForm_actions__KG7Kf\"};","import { useRef } from \"react\";\n\nimport { Fragment } from \"react/cjs/react.production.min\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  return (\n    <Fragment>\n      <Card>\n        <form className={classes.form} onSubmit={submitFormHandler}>\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button className=\"btn\">Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from \"react\";\r\nimport QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { addQuote } from \"../lib/api\";\r\n\r\nconst NewQuote = (props) => {\r\n  const { sendRequest, status } = useHttp(addQuote);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") {\r\n      navigate(\"/quotes\");\r\n    }\r\n  }, [status, navigate]);\r\n\r\n  const addQuoteHandler = (quoteData) => {\r\n    sendRequest(quoteData);\r\n    navigate(\"/quotes\");\r\n  };\r\n  return <QuoteForm isLoading={status === \"pending\"} onAddQuote={addQuoteHandler} />;\r\n};\r\n\r\nexport default NewQuote;\r\n"],"names":["props","className","classes","children","authorInputRef","useRef","textInputRef","Fragment","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","LoadingSpinner","htmlFor","type","id","ref","rows","useHttp","addQuote","sendRequest","status","navigate","useNavigate","useEffect","quoteData"],"sourceRoot":""}