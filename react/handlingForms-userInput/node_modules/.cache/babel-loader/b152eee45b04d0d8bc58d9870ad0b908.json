{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jeong\\\\Desktop\\\\Today-I-learned\\\\react\\\\handlingForms-userInput\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport useInput from \"./hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const re = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i;\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler\n  } = useInput(value => value.trim() !== \"\");\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const enteredEmailIsValid = enteredEmail.trim() !== \"\" && re.test(enteredEmail);\n  const emailInputIsValid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  } else {\n    formIsValid = false;\n  }\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissonHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(enteredName);\n    console.log(enteredEmail); // nameInputRef.current.value = \"\";\n\n    setEnteredName(\"\");\n    setEnteredEmail(\"\");\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsValid ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailInputIsValid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissonHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), emailInputIsValid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Please enter a valid email.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"PsTELuHT7WQ7qsBzDq8QGdgToXk=\", false, function () {\n  return [useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["C:/Users/Jeong/Desktop/Today-I-learned/react/handlingForms-userInput/src/components/SimpleInput.js"],"names":["useEffect","useState","useInput","SimpleInput","props","re","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","trim","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredEmailIsValid","test","emailInputIsValid","formIsValid","emailInputChangeHandler","event","target","emailInputBlurHandler","formSubmissonHandler","preventDefault","setEnteredNameTouched","console","log","setEnteredName","nameInputClasses","nameInputIsValid","emailInputClasses"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport useInput from \"./hooks/use-input\";\n\nconst SimpleInput = (props) => {\n  const re = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i;\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler\n  } = useInput((value) => value.trim() !== \"\");\n\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  const enteredEmailIsValid = enteredEmail.trim() !== \"\" && re.test(enteredEmail);\n\n  const emailInputIsValid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  } else {\n    formIsValid = false;\n  }\n\n  const emailInputChangeHandler = (event) => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const emailInputBlurHandler = (event) => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissonHandler = (event) => {\n    event.preventDefault();\n\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(enteredName);\n    console.log(enteredEmail);\n\n    // nameInputRef.current.value = \"\";\n    setEnteredName(\"\");\n    setEnteredEmail(\"\");\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsValid ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailInputIsValid ? \"form-control invalid\" : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissonHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input type=\"text\" id=\"name\" onChange={nameChangeHandler} onBlur={nameBlurHandler} value={enteredName} />\n        {nameInputHasError && <p className=\"error-text\">Name must not be empty.</p>}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Your Email</label>\n        <input type=\"email\" id=\"email\" onChange={emailInputChangeHandler} onBlur={emailInputBlurHandler} value={enteredEmail} />\n        {emailInputIsValid && <p className=\"error-text\">Please enter a valid email.</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}